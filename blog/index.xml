<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Jordan&#39;s Blog</title>
    <link>https://jordangalida.github.io/blog/</link>
    <description>Recent content in Blog on Jordan&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>Copyright Â© 2025, Jordan Galida.</copyright>
    <lastBuildDate>Tue, 18 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://jordangalida.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HTB Access Write-up</title>
      <link>https://jordangalida.github.io/htb-access-write-up/</link>
      <pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://jordangalida.github.io/htb-access-write-up/</guid>
      <description>&lt;p&gt;This box starts off with a website where you can upload printer drivers, which is a hint to a known critical vulnerability that happened pretty recently. The website says that anything uploaded will be reviewed by someone. In order to gain initial access, you need to upload a file that will execute when viewed such as a &lt;code&gt;.scf&lt;/code&gt; or &lt;code&gt;.lnk&lt;/code&gt; file that reaches out to an SMB server that we control while running a tool like &lt;code&gt;Responder&lt;/code&gt;. This allows you to catch an NTLMv2 hash that can be cracked to gain access as the user Tony. To escalate privileges, you exploit the &lt;code&gt;PrintNightmare&lt;/code&gt; vulnerability.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTB Access Write-up</title>
      <link>https://jordangalida.github.io/htb-access-write-up/</link>
      <pubDate>Mon, 17 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://jordangalida.github.io/htb-access-write-up/</guid>
      <description>&lt;p&gt;This box starts out with a WordPress plugin vulnerability that allows for unauthenticated SQL injection. After logging in as the manager user, you find out that this version of WordPress is vulnerable to an XML parsing issue in the media library that leads to an XXE vulnerability. You use this vulnerability to read the wp-config file that has credentials for the FTP user which in turn contains a file that has a user&amp;rsquo;s credentials. You log into the box as the user, and find that a password manager named passpie is being used and contains the root user&amp;rsquo;s credentials. The passpie hidden directory contains a PGP private key which you are able to decrypt and export root&amp;rsquo;s password.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Basics of Red Teaming</title>
      <link>https://jordangalida.github.io/basics-of-red-teaming/</link>
      <pubDate>Thu, 06 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://jordangalida.github.io/basics-of-red-teaming/</guid>
      <description>&lt;h2 id=&#34;what-is-red-teaming&#34;&gt;What is Red Teaming?&lt;/h2&gt;&#xA;&lt;p&gt;You may commonly hear penetration testing and Red Teaming used interchangeably. They are actually different things. While they do have some overlapping skill sets, they start and and at very different places.&lt;/p&gt;&#xA;&lt;p&gt;A penetration tester&amp;rsquo;s goal is to find &lt;strong&gt;all&lt;/strong&gt; vulnerabilities in the systems within scope, and provide remediation guidance for the vulnerabilities identified. This testing can start externally with little to no information given to the testers (Black Box), start internally with everything diclosed to the testers (White Box), and everything in-between. Additionally, the scope is usually smaller since the tester must comprehensively assess the systems under investigation. The main thing to remember here is that if there are 10 possible vulnerabilities throughout the systems within scope, the penetration tester wants to find all 10.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTB Access Write-up</title>
      <link>https://jordangalida.github.io/htb-access-write-up/</link>
      <pubDate>Thu, 06 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://jordangalida.github.io/htb-access-write-up/</guid>
      <description>&lt;p&gt;In this box, you find an open FTP port that allows for anonymous login and exposes two files: a Microsoft Access database file and a zip file. The database file contains the credentials to unzip the zip file. The zip file contains a .pst file that has an email with credentials allowing you to telnet into the machine. On the host, you find a third party application that runs cmdkey and saves the administrator&amp;rsquo;s credentials. We then use the saved credentials to establish a reverse shell as the administrator user.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTB Remote Write-up</title>
      <link>https://jordangalida.github.io/htb-remote-write-up/</link>
      <pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://jordangalida.github.io/htb-remote-write-up/</guid>
      <description>&lt;p&gt;This was a pretty straight-foward box, however you&amp;rsquo;re going to have to do some Googling to figure out the location where you may find credentials. They are not in the normal expected places. After gaining access to the CMS, you need to again Google version numbers. Checking for public exploits is the first thing I usually do in the real world, but not top on my list for HTB (I should still do this). After exploiting an RCE in the CMS, you gain initial access. You discover that the service account is running the common SeImpersonatePrivilege, which allows you to use the PrintSpoofer exploit to get a shell as SYSTEM.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTB Delivery Write-up</title>
      <link>https://jordangalida.github.io/htb-delivery-write-up/</link>
      <pubDate>Tue, 04 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://jordangalida.github.io/htb-delivery-write-up/</guid>
      <description>&lt;p&gt;In this box, you find a ticketing support application that discloses a valid internal email address. This address can then be used to register your own valid company email address that allows you to access an internal chat application which discloses credentials to a user on the host. You are then able to SSH in as this user and identify credentials stored in a config file that gives you access to a MySQL database with the password hash for the root account. You must utilize a clue found previously in the internal chat application to crack the hash.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTB Active Write-up</title>
      <link>https://jordangalida.github.io/htb-active-write-up/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://jordangalida.github.io/htb-active-write-up/</guid>
      <description>&lt;p&gt;This box is pure Active Directory. In this box, you are able to find a password in a Group Policy file that can be decrypted which gives you access to a service account. You can then use the service account to kerberoast the Administrator account.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;As always, we start out with two nmap scans. One for the top ports and one for all ports with scripts enabled and version detection.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTB Soccer Write-up</title>
      <link>https://jordangalida.github.io/htb-soccer-write-up/</link>
      <pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://jordangalida.github.io/htb-soccer-write-up/</guid>
      <description>&lt;p&gt;Soccer is box that cycles through enumeration and exploitation which is very similar to real-word pentesting. In this box, you exploit a file upload vulnerability that gives you an initial shell only to find another virtual host. After identifying that WebSockets are being used, you find a SQL injection vulnerability which results in credentials for a user on the box. Finally, you find a SETUID bit set that allows you to run another program which is able to run a python script, eventually resulting in a root shell.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTB Union Write-up</title>
      <link>https://jordangalida.github.io/htb-union-write-up/</link>
      <pubDate>Sat, 25 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://jordangalida.github.io/htb-union-write-up/</guid>
      <description>&lt;p&gt;Union is a box that is heavily focused on, you guessed in, UNION-based SQL injection. This box was a little difficult to find the initial injection because you almost have to know a valid player&amp;rsquo;s name, or guess that the table is named &amp;ldquo;players&amp;rdquo;. Without those, you would get the same result each time essentially masking the SQL injection. Additionally, SQLMap is blocked.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;As always, starting off with our nmap scans, we do a quick and comprehensive scan.&lt;/p&gt;</description>
    </item>
    <item>
      <title>HTB Forest Write-up</title>
      <link>https://jordangalida.github.io/htb-forest-write-up/</link>
      <pubDate>Tue, 21 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://jordangalida.github.io/htb-forest-write-up/</guid>
      <description>&lt;p&gt;The Forest machine is a unique box due to it being entirely Active Directory. I agree with &lt;a href=&#34;https://www.youtube.com/watch?v=H9FcE_FMZio&#34;&gt;IppSec&lt;/a&gt; that this box should probably be rated medium rather than easy. However, I think this is a great box to practice your Active Directory enumeration skills and really dig into using BloodHound to find specific attack paths. There is a funky aspect of this box in which a script is being run to reset your user&amp;rsquo;s privileges, and this causes some weird problems you wouldn&amp;rsquo;t normally have.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
